# batchExtract.py: extract set of standard BCGW layers
#
# History:
#   2008-10-08 Doug Layden
#     plus various additions, deletions and changes to the data dictionary
#     over time

import os, sys, time
startTime = time.time()

# ============================================================
# create dictionary of standard LRDW layers
# ============================================================
BCGWLayer = {}
BCGWLayer['bgc'] = 'WHSE_FOREST_VEGETATION.BEC_BIOGEOCLIMATIC_POLY'
BCGWLayer['cws'] = 'WHSE_WATER_MANAGEMENT.WLS_COMMUNITY_WS_PUB_SVW'
BCGWLayer['desig_area'] = 'WHSE_ADMIN_BOUNDARIES.FADM_DESIGNATED_AREAS'
BCGWLayer['fsws'] = 'WHSE_WILDLIFE_MANAGEMENT.WCP_FISH_SENSITIVE_WS_POLY'
BCGWLayer['fwa_aws'] = 'WHSE_BASEMAPPING.FWA_ASSESSMENT_WATERSHEDS_POLY'
BCGWLayer['fwa_streams'] = 'WHSE_BASEMAPPING.FWA_STREAM_NETWORKS_SP'
BCGWLayer['fwa_wetlands'] = 'WHSE_BASEMAPPING.FWA_WETLANDS_POLY'
BCGWLayer['lu'] = 'WHSE_LAND_USE_PLANNING.RMP_LANDSCAPE_UNIT_SVW'
BCGWLayer['mineral_reserve'] = 'WHSE_MINERAL_TENURE.MTA_SITE_SP'
BCGWLayer['ogma'] = 'WHSE_LAND_USE_PLANNING.RMP_OGMA_LEGAL_CURRENT_SVW'
BCGWLayer['ogma_nonlegal'] = 'WHSE_LAND_USE_PLANNING.RMP_OGMA_NON_LEGAL_CURRENT_SVW'
BCGWLayer['own'] = 'WHSE_FOREST_VEGETATION.F_OWN'
BCGWLayer['pvt_cnsrv_lands'] = 'WHSE_LEGAL_ADMIN_BOUNDARIES.WCL_CONSERVATION_LANDS_SP'
BCGWLayer['rec'] = 'WHSE_FOREST_TENURE.FTEN_RECREATION_POLY_SVW'
BCGWLayer['rmp_legal'] = 'WHSE_LAND_USE_PLANNING.RMP_PLAN_LEGAL_POLY_SVW'
BCGWLayer['rmp_nonlegal'] = 'WHSE_LAND_USE_PLANNING.RMP_PLAN_NON_LEGAL_POLY_SVW'
BCGWLayer['slrp'] = 'WHSE_LAND_USE_PLANNING.RMP_STRGC_LAND_RSRCE_PLAN_SVW'
BCGWLayer['tsa'] = 'WHSE_ADMIN_BOUNDARIES.FADM_TSA'
BCGWLayer['tsp'] = 'WHSE_TERRESTRIAL_ECOLOGY.STE_TER_STABILITY_POLYS_SVW'
BCGWLayer['uwr'] = 'WHSE_WILDLIFE_MANAGEMENT.WCP_UNGULATE_WINTER_RANGE_SP'
BCGWLayer['vli'] = 'WHSE_FOREST_VEGETATION.REC_VISUAL_LANDSCAPE_INVENTORY'
BCGWLayer['wha'] = 'WHSE_WILDLIFE_MANAGEMENT.WCP_WILDLIFE_HABITAT_AREA_POLY'
BCGWLayer['wma'] = 'WHSE_TANTALIS.TA_WILDLIFE_MGMT_AREAS_SVW'

# BCGWLayer['aoa'] = 'WHSE_ARCHAEOLOGY.RAAD_AOA_PROVINCIAL'
# BCGWLayer['borden'] = 'WHSE_ARCHAEOLOGY.RAAD_BORDENGRID'
# BCGWLayer['cities'] = 'WHSE_BASEMAPPING.DBM_7H_MIL_POPULATION_POINT'
# BCGWLayer['crwn_ten'] = 'WHSE_TANTALIS.TA_CROWN_TENURES_SVW'
# BCGWLayer['fire_current'] = 'WHSE_LAND_AND_NATURAL_RESOURCE.PROT_CURRENT_FIRE_POLYS_SP'
# BCGWLayer['fire_history'] = 'WHSE_LAND_AND_NATURAL_RESOURCE.PROT_HISTORICAL_FIRE_POLYS_SP'
# BCGWLayer['fnirs'] = 'WHSE_HUMAN_CULTURAL_ECONOMIC.FNIRS_AGREEMENT_BOUNDARY_SVW'
# BCGWLayer['fnta'] = 'WHSE_LEGAL_ADMIN_BOUNDARIES.FNT_TREATY_AREA_SP'
# BCGWLayer['fntl'] = 'WHSE_LEGAL_ADMIN_BOUNDARIES.FNT_TREATY_LAND_SP'
# BCGWLayer['gry'] = 'WHSE_FOREST_VEGETATION.GRY_PSP_STATUS_ACTIVE'
# BCGWLayer['ir'] = 'WHSE_ADMIN_BOUNDARIES.CLAB_INDIAN_RESERVES'
# BCGWLayer['ml'] = 'WHSE_FOREST_TENURE.FTEN_MANAGED_LICENCE_POLY_SVW'
# BCGWLayer['nrd'] = 'WHSE_ADMIN_BOUNDARIES.ADM_NR_DISTRICTS'
# BCGWLayer['nrr'] = 'WHSE_ADMIN_BOUNDARIES.ADM_NR_REGIONS_SP'
# BCGWLayer['park_conservancy'] = 'WHSE_TANTALIS.TA_CONSERVANCY_AREAS_SVW'
# BCGWLayer['park_ecores'] = 'WHSE_TANTALIS.TA_PARK_ECORES_PA_SVW'
# BCGWLayer['park_national'] = 'WHSE_ADMIN_BOUNDARIES.CLAB_NATIONAL_PARKS'
# BCGWLayer['resproj'] = 'WHSE_FOREST_VEGETATION.RESPROJ_RSRCH_INSTN_GVT_SVW'
# BCGWLayer['srlp_line'] = 'WHSE_LAND_USE_PLANNING.RMP_PLAN_LEGAL_LINE_SVW'
# BCGWLayer['srlp_pnt'] = 'WHSE_LAND_USE_PLANNING.RMP_PLAN_LEGAL_POINT_SVW'
# BCGWLayer['tfl'] = 'WHSE_ADMIN_BOUNDARIES.FADM_TFL'
# BCGWLayer['tfl_add'] = 'WHSE_ADMIN_BOUNDARIES.FADM_TFL_ADDITION'
# BCGWLayer['tfl_del'] = 'WHSE_ADMIN_BOUNDARIES.FADM_TFL_DELETION'
# BCGWLayer['tl'] = 'WHSE_FOREST_TENURE.FTEN_TIMBER_LICENCE_POLY_SVW'
# BCGWLayer['van_gvrd_ws'] = 'REG_LAND_AND_NATURAL_RESOURCE.WATERSHEDS_GVRD_POLY'
# BCGWLayer['vri'] = 'WHSE_FOREST_VEGETATION.VEG_COMP_LYR_R1_POLY'
# BCGWLayer['wtr'] = 'WHSE_FOREST_VEGETATION.RSLT_FOREST_COVER_RESERVE_SVW'

for layer in sorted(BCGWLayer.keys()):
 command = "python W:/FOR/VIC/HTS/ANA/Workarea/TOOLS/python/FAIB_Tools/extractFromBCGW10.py "+layer
 print command
 os.system(command)

print "Elapsed time: %d seconds" % (time.time()-startTime)